#################################################################
# XXX: This version of VUMPS using MPOs is not working. It was
# the initial implementation of VUMPS I (@mtfishman) tried to make, but
# there was a bug and it was temporarily abandoned in favor
# of the simpler local Hamiltonian implementation found in
# `src/vumps_localham.jl`. Help getting this working would be highly
# appreciated so we can support more generic Hamiltonians.
# Ideally, the implementation would only overload the minimal amount
# of code needed to be modified (like computing quasi-left and
# right environments and updates to `AC` and `C`), and share the high
# level code with the existing VUMPS code in `src/vumps_localham.jl`.
#
# Please reach out on this issue: https://github.com/ITensor/ITensorInfiniteMPS.jl/issues/39
# if you are interested in implementing this feature.
#################################################################

# Make an ITensorMap representing the transfer matrix T|v> = |Tv>
function transfer_matrix(œà::InfiniteMPS)
  N = nsites(œà)
  œà·¥¥ = prime(linkinds, dag(œà))

  # The unit cell range
  # Turn into function `eachcellindex(œà::InfiniteMPS, cell::Integer = 1)`
  cell‚ÇÅ = 1:N
  # A transfer matrix made from the 1st unit cell of
  # the infinite MPS
  # TODO: make a `Cell` Integer type and call as `œà[Cell(1)]`
  # TODO: make a TransferMatrix wrapper that automatically
  # primes and daggers, so it can be called with:
  # T = TransferMatrix(œà[Cell(1)])
  œà‚ÇÅ = œà[cell‚ÇÅ]
  œà‚ÇÅ·¥¥ = œà·¥¥[cell‚ÇÅ]
  T‚ÇÄ‚ÇÅ = ITensorMap(
    œà‚ÇÅ,
    œà‚ÇÅ·¥¥;
    input_inds=unioninds(commoninds(œà[N], œà[N + 1]), commoninds(œà·¥¥[N], œà·¥¥[N + 1])),
    output_inds=unioninds(commoninds(œà[1], œà[0]), commoninds(œà·¥¥[1], œà·¥¥[0])),
  )
  return T‚ÇÄ‚ÇÅ
end

# A TransferMatrix with the dominant space projected out
struct ProjectedTransferMatrix
  T::ITensorMap
  R::ITensor
end
function (T::ProjectedTransferMatrix)(v::ITensor)
  return v - T.T(v) + (v * T.R) * Œ¥(inds(v))
end

function operator_matrix(H::InfiniteMPO)
  N = nsites(H)

  # MPO bond dimensions
  d‚Éó‚Çï = OffsetArray([dim(commoninds(H[n], H[n + 1])) for n in 0:N], -1)

  # MPO link indices
  l‚Éó‚Çï = OffsetArray([commoninds(H[n], H[n + 1]) for n in 0:N], -1)

  # Collect the on-site MPO operators obtained by projecting
  # the link indices onto certain elements
  H‚É° = Vector{Matrix{ITensor}}(undef, N)
  for n in 1:N
    H‚É°[n] = Matrix{ITensor}(undef, d‚Éó‚Çï[n - 1], d‚Éó‚Çï[n])
    for i in 1:d‚Éó‚Çï[n - 1], j in 1:d‚Éó‚Çï[n]
      H‚É°[n][i, j] = H[n] * setelt((l‚Éó‚Çï[n - 1] .=> i)...) * setelt((l‚Éó‚Çï[n] .=> j)...)
      # Assume lower triangular
      if j > i
        @assert norm(H‚É°[n][i, j]) ‚âà 0
      end
      # Also assume nonzero diagonal entries
      # are proportional to zero
    end

    println("norm.(H‚É°[n])")
    display(norm.(H‚É°[n]))
  end
  return H‚É°
end

# Also input C bond matrices to help compute the right fixed points
# of œà (R ‚âà C * dag(C))
function left_environment(H::InfiniteMPO, œà::InfiniteMPS, C::InfiniteMPS)
  N = nsites(H)
  @assert N == nsites(œà)

  # Do the 1-site case first
  @assert N == 1

  # Transfer matrix between cells
  # T(v) performs a left multiplication
  T = transpose(transfer_matrix(œà))
  R = C[N] * prime(dag(C[N]), linkinds(œà, (N, N + 1)))
  R = translatecell(R, -1)

  # Operator valued matrix representation of MPO
  H‚É° = operator_matrix(H)

  # MPO bond dimensions
  d‚Éó‚Çï = OffsetArray([dim(commoninds(H[n], H[n + 1])) for n in 0:N], -1)

  # MPO link indices
  l‚Éó‚Çï = OffsetArray([commoninds(H[n], H[n + 1]) for n in 0:N], -1)

  # MPS link indices
  l‚Éó = OffsetArray([commoninds(œà[n], œà[n + 1]) for n in 0:N], -1)

  # Starting point of identity
  n = 1 # Assuming we have only one site
  # This is the set of left quasi fixed points
  L‚Éó = Vector{ITensor}(undef, d‚Éó‚Çï[n])
  # The last one is defined to be identity
  L‚Éó[d‚Éó‚Çï[n]] = Œ¥(l‚Éó[n - 1]'..., dag(l‚Éó[n - 1])...)

  for a in reverse(1:(d‚Éó‚Çï[n] - 1))
    YL·µÉ = emptyITensor()
    for b in (a + 1):d‚Éó‚Çï[n]
      YL·µÉ += L‚Éó[b] * œà[n] * H‚É°[n][b, a] * dag(œà[n]')
    end
    YL·µÉ = translatecell(YL·µÉ, -1)
    Hn·µÉ·µÉ = H‚É°[n][a, a]
    Œª·µÉ = Hn·µÉ·µÉ[1, 1]
    Œ¥·µÉ = Œ¥(inds(Hn·µÉ·µÉ))

    if abs(Œª·µÉ) > 1
      error(
        "Diagonal operator of the MPO must be proportional to identity with proprtionality constant less than or equal to 1.",
      )
    end

    if Hn·µÉ·µÉ ‚â† Œª·µÉ * Œ¥·µÉ
      error("Diagonal operator of the MPO must be proportional to identity.")
    end

    if Œª·µÉ < 1
      error("Diagonal elements proportional to identity not currently supported.")
      # Solve using C21
    elseif isone(Œª·µÉ) # equal to identity
      println("Diagonal elements equal to identity.")
      # Solve using C25a
      # Solve:
      # (L·µÉ|[ùüè - T·¥∏ + |R)(ùüè|] = (YL·µÉ| - (YL·µÉ|R)(ùüè|
      b = YL·µÉ - (YL·µÉ * R) * Œ¥(inds(YL·µÉ))
      L‚Éó[a], _ = linsolve(ProjectedTransferMatrix(T, R), b)

      # Get error
      err_lhs =
        L‚Éó[a] - translatecell(L‚Éó[a] * œà[1] * dag(prime(œà[1], "Link")), -1) +
        L‚Éó[a] * R * Œ¥(inds(L‚Éó[a]))
      err_rhs = YL·µÉ - YL·µÉ * R * Œ¥(inds(YL·µÉ))
      @show norm(err_lhs - err_rhs)
    elseif iszero(Œª·µÉ) # is zero
      println("Diagonal element is zero")
      L‚Éó[a] = YL·µÉ
    else
      error(
        "The diagonal operator of the MPO must be zero, identity, or proportional to identity.",
      )
    end
  end
  # TODO: make this a vector of length N
  L = emptyITensor()
  n = 1
  for a in 1:d‚Éó‚Çï[n]
    L += translatecell(L‚Éó[a], 1) * setelt(l‚Éó‚Çï[n]... => a)
  end
  return InfiniteMPS([L])
end

function right_environment(H::InfiniteMPO, œà::InfiniteMPS, C::InfiniteMPS)
  N = nsites(H)
  @assert N == nsites(œà)

  # Do the 1-site case first
  @assert N == 1

  # Transfer matrix between cells
  # T(v) performs a right multiplication
  T = transfer_matrix(œà)
  L = C[N] * prime(dag(C[N]), linkinds(œà, (N, N + 1)))

  # Operator valued matrix representation of MPO
  H‚É° = operator_matrix(H)

  # MPO bond dimensions
  d‚Éó‚Çï = OffsetArray([dim(commoninds(H[n], H[n + 1])) for n in 0:N], -1)

  # MPO link indices
  l‚Éó‚Çï = OffsetArray([commoninds(H[n], H[n + 1]) for n in 0:N], -1)

  # MPS link indices
  l‚Éó = OffsetArray([commoninds(œà[n], œà[n + 1]) for n in 0:N], -1)

  # Starting point of identity
  n = 1 # Assuming we have only one site
  # This is the set of left quasi fixed points
  R‚Éó = Vector{ITensor}(undef, d‚Éó‚Çï[n])
  # The first one is defined to be identity
  R‚Éó[1] = Œ¥(l‚Éó[n]'..., dag(l‚Éó[n])...)

  for a in 2:d‚Éó‚Çï[n]
    YR·µÉ = emptyITensor()
    for b in 1:(a - 1)
      YR·µÉ += R‚Éó[b] * œà[n] * H‚É°[n][a, b] * dag(œà[n]')
    end
    YR·µÉ = translatecell(YR·µÉ, 1)
    Hn·µÉ·µÉ = H‚É°[n][a, a]
    Œª·µÉ = Hn·µÉ·µÉ[1, 1]
    Œ¥·µÉ = Œ¥(inds(Hn·µÉ·µÉ))

    if abs(Œª·µÉ) > 1
      error(
        "Diagonal operator of the MPO must be proportional to identity with proprtionality constant less than or equal to 1.",
      )
    end

    if Hn·µÉ·µÉ ‚â† Œª·µÉ * Œ¥·µÉ
      error("Diagonal operator of the MPO must be proportional to identity.")
    end

    if Œª·µÉ < 1
      error("Diagonal elements proportional to identity not currently supported.")
      # Solve using C22
    elseif isone(Œª·µÉ) # equal to identity
      println("Diagonal elements equal to identity.")
      # Solve using C25b
      # Solve:
      # [ùüè - T·¥ø + |ùüè)(L|]|R·µÉ) = |YR·µÉ) - |ùüè)(L|YR·µÉ)
      b = YR·µÉ - (L * YR·µÉ) * Œ¥(inds(YR·µÉ))
      R‚Éó[a], _ = linsolve(ProjectedTransferMatrix(T, L), b)

      # Get error
      err_lhs =
        R‚Éó[a] - translatecell(œà[1] * dag(prime(œà[1], "Link")) * R‚Éó[a], 1) +
        L * R‚Éó[a] * Œ¥(inds(R‚Éó[a]))
      err_rhs = YR·µÉ - L * YR·µÉ * Œ¥(inds(YR·µÉ))
      @show norm(err_lhs - err_rhs)
    elseif iszero(Œª·µÉ) # is zero
      println("Diagonal element is zero")
      L‚Éó[a] = YL·µÉ
    else
      error(
        "The diagonal operator of the MPO must be zero, identity, or proportional to identity.",
      )
    end
  end
  # TODO: make this a vector of length N
  R = emptyITensor()
  n = 1
  for a in 1:d‚Éó‚Çï[n]
    R += R‚Éó[a] * setelt(l‚Éó‚Çï[n]... => a)
  end
  return InfiniteMPS([R])
end

vumps(H::InfiniteMPO, œà::InfiniteMPS; kwargs...) = vumps(H, orthogonalize(œà, :); kwargs...)

# Find the best orthogonal approximation given
# the center tensors AC and C
function ortho(AC::ITensor, C::ITensor)
  E = AC * dag(C)
  U, P = polar(E, uniqueinds(AC, C))
  l = commoninds(U, P)
  return noprime(U, l)
end

#function right_ortho(C::ITensor, AC::ITensor)
#  E = dag(C) * AC
#  U, P = polar(E, uniqueinds(C, AC))
#  l = commoninds(U, P)
#  return noprime(U, l)
#end

function vumps(H::InfiniteMPO, œà::InfiniteCanonicalMPS; nsweeps=10)
  for sweep in 1:nsweeps
    L = left_environment(H, œà.AL, œà.C)
    R = right_environment(H, œà.AR, œà.C)

    n = 1

    # 0-site effective Hamiltonian
    H‚Å∞ = ITensorMap([L[n], R[n]])
    vals0, vecs0, info0 = eigsolve(H‚Å∞, œà.C[n])
    E0 = vals0[1]
    C‚Åø = vecs0[1]
    C = InfiniteMPS([C‚Åø])

    @show E0
    @show inds(C‚Åø)

    # 1-site effective Hamiltonian
    H¬π = ITensorMap([L[n - 1], H[n], R[n]])
    vals1, vecs1, info1 = eigsolve(H¬π, œà.AL[n] * œà.C[n]; ishermition=true)
    E1 = vals1[1]
    AC‚Åø = vecs1[1]
    AC = InfiniteMPS([AC‚Åø])

    @show E1
    @show inds(AC‚Åø)

    AL‚Åø = ortho(AC‚Åø, C‚Åø)
    œàL = InfiniteMPS([AL‚Åø])

    @show norm(AL‚Åø * C‚Åø - AC‚Åø)

    @show inds(AL‚Åø)
    #AR‚Åø = ortho(AC‚Åø, translatecell(C‚Åø, -1))
    AR‚Åø = replacetags(AL‚Åø, "Left" => "Right")

    @show norm(translatecell(C‚Åø, -1) * AR‚Åø - AC‚Åø)
    œàR = InfiniteMPS([AR‚Åø])

    œà = InfiniteCanonicalMPS(œàL, C, œàR)
  end

  return œà
end
